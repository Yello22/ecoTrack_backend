generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(uuid())
  email     String   @unique
  phone     String?
  firstName String?
  lastName  String?
  password  String
  roles     Roles[]  @default([customer])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  activities                       Activity[]
  challenges                       UserChallenge[]
  notifications                    Notification[]
  suggestions                      Suggestion[]
  userEnvironmentalData            UserEnvironmentalData[]
}

model TokenWhiteList {
  id             String  @id @default(uuid())
  userId         String
  accessToken    String?
  refreshToken   String?
  refreshTokenId String?
  expiredAt      DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}

enum Roles {
  admin
  customer
}

model ActivityType {
  id              String    @id @default(cuid()) @db.Char(25)
  name            String    @db.VarChar(50)
  carbonFactor    Float     // Coefficient to calculate carbon emission
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?

  activities      Activity[]
}

model Activity {
  id             String   @id @default(cuid()) @db.Char(25)
  description    String?  @db.Text()
  carbonEmission Float    // This can be calculated based on the type and specific details
  userId         String   @db.Char(25)
  activityTypeId String   @db.Char(25)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt      DateTime?

  user           User         @relation(fields: [userId], references: [id])
  activityType   ActivityType @relation(fields: [activityTypeId], references: [id])
}

model Challenge {
  id             String   @id @default(cuid()) @db.Char(25)
  title          String   @db.VarChar(100)
  description    String?  @db.Text()
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt      DateTime?
  UserChallenge  UserChallenge[]
}

model UserChallenge {
  id            String    @id @default(cuid()) @db.Char(25)
  userId        String    @db.Char(25)
  challengeId   String    @db.Char(25)
  completed     Boolean   @default(false)
  completionDate DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user          User      @relation(fields: [userId], references: [id])
  challenge     Challenge @relation(fields: [challengeId], references: [id])
}

model EnvironmentalData {
  id           String   @id @default(cuid()) @db.Char(25)
  location     String   @db.VarChar(100)
  airQuality   Int
  temperature  Float
  humidity     Float
  timestamp    DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime?
  
  userEnvironmentalData UserEnvironmentalData[]
}

model UserEnvironmentalData {
  id                 String            @id @default(cuid()) @db.Char(25)
  userId             String            @db.Char(25)
  environmentalDataId String           @db.Char(25)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  
  user               User              @relation(fields: [userId], references: [id])
  environmentalData  EnvironmentalData @relation(fields: [environmentalDataId], references: [id])
}

model Notification {
  id        String   @id @default(cuid()) @db.Char(25)
  content   String   @db.Text()
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  userId    String   @db.Char(25)
  
  user      User     @relation(fields: [userId], references: [id])
}

model Suggestion {
  id        String   @id @default(cuid()) @db.Char(25)
  content   String   @db.Text()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  userId    String   @db.Char(25)
  
  user      User     @relation(fields: [userId], references: [id])
}
